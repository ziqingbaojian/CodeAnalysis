[
    {
        "name": "tca_ql_cpp",
        "display_name": "TCA-Armory-Q1",
        "description": "基于QL的代码静态分析工具，目前处于试用中, 非完整版",
        "license": "自研",
        "libscheme_set": [],
        "task_processes": [
            "analyze",
            "datahandle",
            "compile"
        ],
        "scan_app": "codelint",
        "scm_url": null,
        "run_cmd": null,
        "envs": null,
        "build_flag": false,
        "checkrule_set": [
            {
                "real_name": "array_overflow",
                "display_name": "ArrayOverFlow",
                "severity": "error",
                "category": "correctness",
                "rule_title": "数组越界",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "检查index大小。",
                "owner": "",
                "labels": [],
                "description": "#### array_overflow\narray_overflow 检查数组越界的情况。不正确的缓存区访问可能损坏内存，导致程序崩溃或读取到权限外的内存。\n\n##### 代码示例\n以下提供一个或多个array_overflow案例\n\n```\nvoid foo() {\n    int array[10];\n    int i = get();\n    // i = 9;\n    if (i > 8 && i <= length(array)) {  // Shoud be i < length(array)\n        array[i] = 1;  // defect: array[10] overflow\n    }\n    array[i] = 1;  // defect: array[10] overflow\n}\n\n\nvoid test(int i) {\n    int n= 10;\n    char *p = malloc(sizeof(int) * 10);\n    int y = n;\n    p[y] = 'a'; // defect: writing to buffer[y] overflow\n}\n```",
                "disable": false
            },
            {
                "real_name": "buff_overflow",
                "display_name": "BuffOverFlow",
                "severity": "error",
                "category": "correctness",
                "rule_title": "缓冲区溢出",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "检查函数gets scanf strcpy不当调用引发的溢出漏洞",
                "disable": false
            },
            {
                "real_name": "cyclic_import",
                "display_name": "CycImport",
                "severity": "warning",
                "category": "usability",
                "rule_title": "文件相互导入",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "不要做循环import，出现这种情况多半是软件层次设计没做好，在Go,Cpp可能会编译失败，其他语言全局导入时也会出错，即使不报错对后续阅读和维护也不是很友好。需要重新设计。",
                "owner": "",
                "labels": [],
                "description": "两个文件相互导入\n以python为例\n```\n# a.py\nimport b\n\nclass Model(object):\n    def do_something(self):\n        b.do_somthing()\n\n# b.py\nimport a\n\ndef do_somthing():\n    print(\"Hello CodeDog\")\n\n```",
                "disable": false
            },
            {
                "real_name": "dead_branch",
                "display_name": "DeadBranch",
                "severity": "warning",
                "category": "performance",
                "rule_title": "dead_branch 检查永远不会被执行到的分支代码，其原因可能是具有相同效果的控制语句或某些条件在特定情况下永远不会执行。",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "dead_branch 检查永远不会被执行到的分支代码，其原因可能是具有相同效果的控制语句或某些条件在特定情况下永远不会执行。\n\n##### 代码示例\n\n以下提供一个或多个dead_branch代码案例\n\n```\n\nvoid dead_branch(int i) {\n    if (i < 100) {\n        if ( i > 100) {     // Defect: dead_branch, i 属于 (-inf, 100) 不存在 (100, inf)的可能\n            dosomething() ;\n        }\n        return;\n    } else if (i >= 100) {\n        if ( i < 99 ) {     // Defect: dead_branch, i 属于[100, inf) 不存在 (-inf, 99)的可能\n            dosomething();\n        }\n        return;\n    } else if (i < 10){     // Defect: dead_branch, 在前面分支中已经包含了所有i的可能，这里已经不存在 (-inf, 10)的可能\n        dosomething();\n    }\n    else {                  // Defect: dead_branch, 在前面分支中已经包含了所有i的可能\n        dosomething();\n    }\n    return;\n}",
                "disable": false
            },
            {
                "real_name": "dead_code",
                "display_name": "DeadCode死代码检查",
                "severity": "warning",
                "category": "performance",
                "rule_title": "死代码检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "删除用不到的代码回收资源",
                "owner": "",
                "labels": [],
                "description": "检查代码中永远不会被执行到的代码\n移除这类的代码有两种优点，不但可以减少程序的大小，还可以避免程序在执行中进行不相关的运算行为，减少它执行的时间\n\n下列的示例，以C语言写成：\n```\n int foo(void)\n {\n   int a = 24;\n   int b = 25; \n   int c;\n   c = a << 2;\n   return c;\n   b = 24;\n   return 0;\n }\n```\n分析上述程序对于数值的使用，将会发现b的数值在第一次被赋值之后，就不再使用，而且b是在foo函数内宣告，无法在函数外面使用，所以变量b是无用的，优化的过程可以回收他所使用的空间，并删除他的初始化。",
                "disable": false
            },
            {
                "real_name": "dead_lock",
                "display_name": "DeadLock",
                "severity": "error",
                "category": "usability",
                "rule_title": "死锁检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "使用lock_guard，规范锁顺序",
                "owner": "",
                "labels": [],
                "description": "#### dead_lock\ndead_lock 如果发现文件内存在 mtx1 -> mtx2 的上锁顺序时，另存在mtx2 -> mtx1 的上锁顺序，视为死锁或存在死锁的可能，则会上报错误。\n死锁发生时程序将会卡死无法正常执行。\n\n##### 规则参数\n- better-lock: True or False 默认为 False\n\n##### 代码示例\n以下提供一个或多个 dead_lock 案例\n\n在下面代码中，函数 increase 以将 counter 加到 1000 为目的。但在线程 1 中第一次释放 mtx 后，线程 2 的 mtx 上锁，此时线程1等待线程2释放mtx，线程2等待线程1释放mtx2，形成死锁，程序卡死。\n```\nint counter = 0;\nstd::mutex mtx;\nstd::mutex mtx2;\nvoid increase() {\n    while (1) {\n        mtx.lock();\n        mtx2.lock();\n        mtx.unlock();\n        mtx.lock();  // defect: dead_lock\n        if (counter <= 1000)\n            counter++;\n        else\n            break;\n        mtx2.unlock();\n        mtx.unlock()\n    }\n}\n```\n\n在下面代码中 线程函数increase1存在mtx -> mtx2 的顺序，increase2顺序为 mtx2 -> mtx；视为出现死锁。\n```\nvoid increase1() {\n    while (1) {\n        mtx.lock();\n        mtx2.lock();\n        if (counter <= 1000)\n            counter++;\n        else\n            break;\n        mtx2.unlock();\n        mtx.unlock()\n    }\n}\nvoid increase2() {\n    while (1) {\n        mtx2.lock();\n        mtx.lock();  // defect: dead_lock; \n        if (counter <= 1000)\n            counter++;\n        else\n            break;\n        mtx2.unlock();\n        mtx.unlock()\n    }\n}\n```\n\n以下案例在`better-lock`参数为`True`时将会生效\n使用`better-lock`规则会检查在上锁期间若调用其他函数时将视为可能会出现预期之外的异常，且上锁期间应只做对全局变量操作以提升性能\n```\nvoid increase1() {\n    while (1) {\n        mtx.lock();\n        if (counter <= 1000)\n            counter++;\n        else\n            break;\n        read_counter(counter);  // defect: dead_lock\n        mtx.unlock()\n    }\n}\nvoid read_counter(counter){\n    std::cout << counter << std::endl;\n    do_something_more();\n}\nvoid increase1() {\n    while (1) {\n        std::lock_guard<std::mutex> lk(mtx);  // good: 使用lock_guard会自动上锁解锁将不会检查dead_lock\n        if (counter <= 1000)\n            counter++;\n        else\n            break;\n        read_counter(counter);\n    }\n}\n```",
                "disable": false
            },
            {
                "real_name": "forward_null",
                "display_name": "ForwardNull",
                "severity": "error",
                "category": "correctness",
                "rule_title": "forward_null 检查可能导致程序终止或运行时异常的错误。它查找指针或引用被检查是否为 null 或被赋值为 null，且之后被解引用的很多情况。",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "确认使用时指针不可能为空，若为误报请处理为误报",
                "owner": null,
                "labels": [],
                "description": "#### forward_null\nforward_null 检查可能导致程序终止或运行时异常的错误。它查找指针或引用被检查是否为 null 或被赋值为 null，且之后被解引用的很多情况。\n\n\n##### 规则参数\n- trust_param True or False 默认为 True\n\n##### 代码示例\n以下提供一个或多个forward_null代码案例\n\n指针曾经有过检查null的操作则会视为有可能为空指针，之后在未被确认为非空指针情况下直接使用。将会视为`forward_null`错误\n```\nvoid forward_null_1() {\n    int * p;\n    p = get_int_pointer();\n    dosomething(p);\n    if (p == NULL) {\n        std::cout << \"Null Pointer Find\" << srd::endl;\n        // return;      // prefer: if return here\n    } else {\n        dosomething(p);     // good: p is not NULL\n    }\n    dosomething(p);     // defect forward_null: p may NULL\n}\n\n\nvoid forward_null_2(int *p) {\n    dosomething(p);\n    if (p == NULL) {\n        return;\n    } else {\n        dosomething(p);     // good: p is not NULL\n    }\n    dosomething(p);     // good\n    ...\n    if (p != NULL) {    // means p may nullpointer here\n        dosomething(p);\n    }\n    dosomething(p);     // defect forward_null:p may NULL\n}\n```\n\n以下案例在设置`trust_param`为`False`时将会生效，其将会默认认为函数参数存在空指针可能，必须确认无空指针可能时方可使用\n```\nvoid forward_null_2(int *p) {\n    dosomething(p);     // defect: param p may NULL\n    if (p != NULL) {    // means p may nullpointer here\n        dosomething(p);\n    }\n    dosomething(p);     // defect forward_null:p may NULL\n}\n```",
                "disable": false
            },
            {
                "real_name": "function_override",
                "display_name": "FunctionOverRide",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "非虚函数重写检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "确认重写是否时期望之内的，是否为误写",
                "owner": "",
                "labels": [],
                "description": "期望只有虚函数可以进行重写操作，非虚函数禁止重写，非虚函数重写时可能为误写，需要确认。\n例如：\n```\nclass father{\n    public:\n\n        virtual void test(){ std::cout<<\"hello\";};\n\n        void test2(){ std::cout<<\"hello\";};\n};\n\nclass son: public father{\n    public:\n\n        void test(){ std::cout<<\"hi\";};    // good test 为虚函数\n\n        void test2(){ std::cout<<\"hi\";};    // bad test2 不是虚函数\n};\n```",
                "disable": false
            },
            {
                "real_name": "func_ret_null",
                "display_name": "FuncRetNull",
                "severity": "warning",
                "category": "usability",
                "rule_title": "函数返回值空指针检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "使用函数返回值前先判断是否为nullptr",
                "owner": "",
                "labels": [],
                "description": "当函数存在nullptr返回值时，在调用该函数的地方必须判断指针是否为空。",
                "disable": false
            },
            {
                "real_name": "func_ret_null_full",
                "display_name": "FuncRetNullFull",
                "severity": "warning",
                "category": "usability",
                "rule_title": "函数返回值空指针全量检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "使用前检查指针是否为空",
                "owner": "",
                "labels": [],
                "description": "当函数存在nullptr返回值时，在调用该函数的地方必须判断指针是否为空。该规则会全量检查项目内调用，耗时会较长，简化版规则func_ret_null",
                "disable": false
            },
            {
                "real_name": "glob_null_pointer",
                "display_name": "GlobNullPointer",
                "severity": "error",
                "category": "correctness",
                "rule_title": "glob_null_pointer 检查文件内全局指针是否为空，指针赋值将会被认为不为空指针，但检测到空指针判断则视为指针此时可能为空，如果在可能为空时使用则会报错",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "全局指针使用前确保不为空",
                "owner": null,
                "labels": [],
                "description": "#### glob_null_pointer\nglob_null_pointer 检查文件内全局指针是否为空，指针赋值将会被认为不为空指针，但检测到空指针判断则视为指针此时可能为空，如果在可能为空时使用则会报错\n\n##### 代码示例\n以下将提供一个或多个glob_null_pointer案例\n\n```\nint *p;\n\n\nvoid thread1() {\n    p = get_int_pointer();      // p is not NULL\n    dosomething(p);     // good\n    if (p != NULL) {\n        something(p);   // good\n    }\n    something(p);  // defect: p may NULL, because check p before\n}\n\n\nvoid thread2() {\n    *p = 6;     // defect: p may NULL\n    if (p != NULL) {\n        something(p);   // good\n    }\n    something(p);  // defect: p may NULL\n}\n```",
                "disable": false
            },
            {
                "real_name": "magic_number",
                "display_name": "MagicNumber",
                "severity": "info",
                "category": "convention",
                "rule_title": "魔法数字",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "采用有意义的常量代替",
                "owner": "",
                "labels": [],
                "description": "魔法数值使代码的可读性大大下降。而且，如果同样的数值多次出现时，到底这些数值是不是带有同样的含义呢，谁也说不清楚。另一方面，如果本来应该使用相同数值的地方，一旦用错了，也很难发现。\n例子：\n```\nint priceTable[] = new int[16]； //ERROR：这个16究竟有何含义呢？\n\n\nstatic final int PRICE_TABLE_MAX = 16； //OK：带名字\n\nint price Table[] = new int [PRICE_TABLE_MAX]； //OK：名字的含义是很清楚的\n\n\n```\n规则会检查同文件如果有超过三次使用同一个数字（0，1，-1除外）则视为魔法数字\n用于判断 true, false的0, 1，-1会被排除在外",
                "disable": false
            },
            {
                "real_name": "memoryleak",
                "display_name": "MemoryLeak",
                "severity": "warning",
                "category": "security",
                "rule_title": "内存泄漏",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "请使用相应语句或函数如free, delete释放该内存",
                "owner": "",
                "labels": [],
                "description": "内存经malloc new calloc等初始化后在函数结束时没有释放",
                "disable": true
            },
            {
                "real_name": "missing_lock",
                "display_name": "MissingLock",
                "severity": "error",
                "category": "correctness",
                "rule_title": "线程锁检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "访问变量时添加变量锁",
                "owner": "",
                "labels": [],
                "description": "线程内更新变量时需要使用线程锁，避免出现预期外的异常。目前支持C++ thread, pthread 库。\n以下为示例代码\n```\nusing namespace std;\nint counter = 0;\nmutex mtx; // 保护counter\n\nvoid increase(int time) {\n    for (int i = 0; i < time; i++) {\n        // mtx.lock();\n        // lock_guard<mutex> lk(mtx);\n        counter++;  // 没有使用线程锁，出现变量冲突\n        // mtx.unlock();\n    }\n}\n\nint main(int argc, char** argv) {\n    std::thread t1(increase, 10000);\n    thread t2(increase, 10000);\n    t1.join();\n    t2.join();\n    cout << \"counter:\" << counter << endl;\n    return 0;\n}\n```",
                "disable": false
            },
            {
                "real_name": "nest",
                "display_name": "Nest",
                "severity": "info",
                "category": "convention",
                "rule_title": "检查函数嵌套过深",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "拆分函数",
                "owner": "",
                "labels": [],
                "description": "函数嵌套尽量不要超过5层，\n多的话建议拆分出其他函数\n以Go代码为例\n```\n// AddArea 添加成功或出错\nfunc (s *BookingService) AddArea(areas ...string) error {\n    s.Lock()\n    defer s.Unlock()\n    \n    for _, area := range areas {\n        for _, has := range s.areas {\n            if area == has {\n                return srverr.ErrAreaConflict\n            }\n        }\n        s.areas = append(s.areas, area)\n        s.areaOrders[area] = new(order.AreaOrder)\n    }\n    return nil\n}\n// 建议调整为这样：\n\n// AddArea 添加成功或出错\nfunc (s *BookingService) AddArea(areas ...string) error {\n    s.Lock()\n    defer s.Unlock()\n    \n    for _, area := range areas {\n        if s.HasArea(area) {\n            return srverr.ErrAreaConflict\n        }\n        s.areas = append(s.areas, area)\n        s.areaOrders[area] = new(order.AreaOrder)\n    }\n    return nil\n}\n\n// HasArea ...\nfunc (s *BookingService) HasArea(area string) bool {\n    for _, has := range s.areas {\n        if area == has {\n            return true\n        }\n    }\n    return false\n}\n```",
                "disable": false
            },
            {
                "real_name": "resource_leak",
                "display_name": "ResourceLeak",
                "severity": "error",
                "category": "performance",
                "rule_title": "资源泄漏",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "ResourceLeak用于检查代码中没有释放的系统资源，包含打开后未关闭的文件，分配内存后未释放的指针。\n下面提供c++代码示例:\n```\nint leak_example(int c) {\n  void *p = malloc(10);\n  if(c)\n    return -1;  // bad p is leak\n  free(p);\n  return 0;\n}\n\n\nint wrong_error_check() {\n  void *p = malloc(10);\n  void *q = malloc(20);\n  if(!p || !q)\n    return -1;  // bad p, q is leak\n  free(q);\n  free(p);\n  return 0;\n}\n\nint test(int i) {\n  void *p = malloc(10);\n  void *q = malloc(4);\n  if(i > 0)\n    p = q;  // bad p is leak\nelse\n    free(q);\n  free(p);\n  return 0; \n}\n\nvoid test(int c) {\n  FILE *p = fopen(\"foo.c\", \"rb\");\n  if(c)\n    return;       // bad p leak\n  fclose(p);\n}\n\n```",
                "disable": false
            },
            {
                "real_name": "reverse_null",
                "display_name": "ReverseNull",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "reverse_null 检查已经使用过指针，但在后续又对指针进行了判空操作；会被认为之前使用指针也有可能是空指针。",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "确认是否也需要判空",
                "owner": null,
                "labels": [],
                "description": "#### reverse_null\nreverse_null 检查已经使用过指针，但在后续又对指针进行了判空操作；会被认为之前使用指针也有可能是空指针。\n\n##### 代码示例\n以下将提供一个或多个reverse_null案例\n\n```\nvoid reverse_null(int *p) {\n    dosomething(p);      // use p\n    if (p != NULL) {    // defect reverse_null: It means p may NULL\n        dosomething(p);\n    }\n    ...\n```",
                "disable": false
            },
            {
                "real_name": "static_cast_checker",
                "display_name": "StaticCast",
                "severity": "warning",
                "category": "usability",
                "rule_title": "检查静态类型转换",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "减少高精度到低精度的类型转换",
                "owner": "",
                "labels": [],
                "description": "不同类型的数值精准的不同从一个类型转换到另一个类型会发生数据丢失\n```\n[\n    \"int\", \"unsigned int\", \"long\", \"unsigned long\", \"long long\", \"unsigned long long\", \"float\", \"double\", \"long double\",\n]\n```\n从右到左的转换都有可能发生错误",
                "disable": false
            },
            {
                "real_name": "uinit",
                "display_name": "UInit",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "uinit 检查变量在定义后直接使用，却没有初始化的场景；使用未初始化的变量 可能导致无法预测的行为、崩溃和安全漏洞。",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "#### uinit\nuinit 检查变量在定义后直接使用，却没有初始化的场景；使用未初始化的变量 可能导致无法预测的行为、崩溃和安全漏洞。\n\n##### 规则参数\n- deep_level: true, false 设置为true时将会分析作为函数参数的情况，否则无视作为函数参数的使用。\n\n##### 代码示例\n\n以下提供一个或多个 uinit 代码案例\n\n\n```\n\nvoid test(char* t) {\n    std::cout<< t << std::endl;     // Defect: p 作为函数参数，此处未初始化。\n    return;\n}\n\n\nint uinit(int i) {\n    int a;\n    char * p;\n    test(p);    // deep_level = true\n    if (i < 10)\n        a = 1;\n    else\n        i = 1;\n    return a;   // Defect: i大于10时，a并未赋值\n}\n```",
                "disable": false
            },
            {
                "real_name": "unused_value",
                "display_name": "UnusedValue",
                "severity": "warning",
                "category": "correctness",
                "rule_title": "无用值检查",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "",
                "owner": "",
                "labels": [],
                "description": "#### unused_value\nunused_value 检查那些赋予给变量的值是否正确被使用，存在连续两次赋予变量值的情况，视为第一次赋予的值未被正确使用，报出错误。\n两次连续赋值可能存在条件控制语句出现错误、变量名拼写错误等情况。\n##### 代码示例\n以下提供一个或多个unused_value案例\n\n以下函数会因为key的不同去不一样的神明，但实际上 Zeus Hades却永远不会使用到。\n```\nconst char* key_value(const int key) {\n    const char * value = 0;\n    if (key != 0) {\n        value = \"Zeus\";\n    } else if (key != 1) {\n        value = \"Hades\";\n    } \n    if (key != 2) { // Should be 'else if' here.\n        value = \"Poseidon\";  // defect: unused_value Zeus Hades  never used\n    }\n    else {\n        value = \"Unknow\n    }\n    return result;\n}\n```\n以下继续提供几个unused_value代码\n```\nconst char* key_value1(const int key) {\n    const char * value = 0;\n    value = \"Zeus\";  // defect: Zeus never used\n    if (key == 1) {\n        value = \"Hades;\n    } else if (key == 2) {\n        value = \"Poseidon\";\n    } else {  // May else need not be here\n        value = \"Unknow\";\n    }\n    return value\n}\n\nconst char* key_value2(const int key) {\n    const char * value = 0;\n    value = \"Zeus\";  // better Zeus used\n    if (key == 1) {\n        value = \"Hades;\n    } else if (key == 2) {\n        value = \"Poseidon\";\n    }\n    return value\n}\n\nconst char* key_value3(const int key) {\n    const char * value = 0;\n    if (key == 1) {\n        value = \"Hades;\n    } else {\n        value = \"Poseidon\";\n    }\n    value = \"Zeus\";  // defect: Hades Poseidon never used\n    return value\n}\n```",
                "disable": false
            },
            {
                "real_name": "use_after_release",
                "display_name": "UAR",
                "severity": "error",
                "category": "correctness",
                "rule_title": "指针释放后再次使用",
                "rule_params": null,
                "custom": false,
                "languages": [
                    "cpp"
                ],
                "solution": "释放后需要使用必须重新分配内存",
                "owner": "",
                "labels": [],
                "description": "use_after_free 检查当指针已经被释放但在后续仍然使用该指针的情况。\n\n##### 代码示例\n以下提供一个或多个use_after_free代码案例\n\n通常情况下已经释放的指针只允许置空或重新指向新的值，不允许存在读取或作为函数参数使用。\n```\n\nvoid UAR() {\n    int* p = new int[];\n    p = get_array();\n    dosomething(p);\n    delete p;\n    p = NULL;  // allow\n    p = get_array();  // allow: get array again\n    delete p;\n    dosomething(p);  // defect: use as param\n    std::cout << \"p[0] = \" << p[0] << std::endl;  // defect: read p\n}\n```",
                "disable": false
            }
        ],
        "open_user": true,
        "open_saas": false
    }
]